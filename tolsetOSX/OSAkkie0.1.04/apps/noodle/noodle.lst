     1 00000000                                 [FORMAT "WCOFF"]
     2 00000000                                 [INSTRSET "i486p"]
     3 00000000                                 [OPTIMIZE 1]
     4 00000000                                 [OPTION 1]
     5 00000000                                 [BITS 32]
     6 00000000                                 	EXTERN	_osak_getbuflen
     7 00000000                                 	EXTERN	__alloca
     8 00000000                                 	EXTERN	_api_openwin
     9 00000000                                 	EXTERN	_api_alloctimer
    10 00000000                                 	EXTERN	_api_inittimer
    11 00000000                                 	EXTERN	_sprintf
    12 00000000                                 	EXTERN	_api_boxfilwin
    13 00000000                                 	EXTERN	_api_putstrwin
    14 00000000                                 	EXTERN	_api_settimer
    15 00000000                                 	EXTERN	_api_getkey
    16 00000000                                 	EXTERN	_api_end
    17 00000000                                 [FILE "noodle.c"]
    18                                          [SECTION .data]
    19 00000000                                 LC0:
    20 00000000 6E 6F 6F 64 6C 65 00            	DB	"noodle",0x00
    21 00000007                                 LC1:
    22 00000007 25 35 64 3A 25 30 32 64 3A 25   	DB	"%5d:%02d:%02d",0x00
       00000011 30 32 64 00 
    23                                          [SECTION .text]
    24 00000000                                 	GLOBAL	_HariMain
    25 00000000                                 _HariMain:
    26 00000000 55                              	PUSH	EBP
    27 00000001 89 E5                           	MOV	EBP,ESP
    28 00000003 57                              	PUSH	EDI
    29 00000004 56                              	PUSH	ESI
    30 00000005 31 FF                           	XOR	EDI,EDI
    31 00000007 53                              	PUSH	EBX
    32 00000008 31 F6                           	XOR	ESI,ESI
    33 0000000A 83 EC 20                        	SUB	ESP,32
    34 0000000D 89 65 E0                        	MOV	DWORD [-32+EBP],ESP
    35 00000010 E8 [00000000]                   	CALL	_osak_getbuflen
    36 00000015 69 C0 00001D4C                  	IMUL	EAX,EAX,7500
    37 0000001B 83 C0 10                        	ADD	EAX,16
    38 0000001E E8 [00000000]                   	CALL	__alloca
    39 00000023 C7 45 D4 00000000               	MOV	DWORD [-44+EBP],0
    40 0000002A 8D 44 24 0F                     	LEA	EAX,DWORD [15+ESP]
    41 0000002E 68 [00000000]                   	PUSH	LC0
    42 00000033 6A FF                           	PUSH	-1
    43 00000035 83 E0 F0                        	AND	EAX,-16
    44 00000038 6A 32                           	PUSH	50
    45 0000003A 68 00000096                     	PUSH	150
    46 0000003F 50                              	PUSH	EAX
    47 00000040 E8 [00000000]                   	CALL	_api_openwin
    48 00000045 89 45 DC                        	MOV	DWORD [-36+EBP],EAX
    49 00000048 E8 [00000000]                   	CALL	_api_alloctimer
    50 0000004D 89 45 D8                        	MOV	DWORD [-40+EBP],EAX
    51 00000050 68 00000080                     	PUSH	128
    52 00000055 FF 75 D8                        	PUSH	DWORD [-40+EBP]
    53 00000058 E8 [00000000]                   	CALL	_api_inittimer
    54 0000005D 83 C4 1C                        	ADD	ESP,28
    55 00000060                                 L2:
    56 00000060 57                              	PUSH	EDI
    57 00000061 8D 5D E4                        	LEA	EBX,DWORD [-28+EBP]
    58 00000064 56                              	PUSH	ESI
    59 00000065 FF 75 D4                        	PUSH	DWORD [-44+EBP]
    60 00000068 68 [00000007]                   	PUSH	LC1
    61 0000006D 53                              	PUSH	EBX
    62 0000006E E8 [00000000]                   	CALL	_sprintf
    63 00000073 6A 07                           	PUSH	7
    64 00000075 6A 29                           	PUSH	41
    65 00000077 6A 73                           	PUSH	115
    66 00000079 6A 1B                           	PUSH	27
    67 0000007B 6A 1C                           	PUSH	28
    68 0000007D FF 75 DC                        	PUSH	DWORD [-36+EBP]
    69 00000080 E8 [00000000]                   	CALL	_api_boxfilwin
    70 00000085 83 C4 2C                        	ADD	ESP,44
    71 00000088 53                              	PUSH	EBX
    72 00000089 6A 0B                           	PUSH	11
    73 0000008B 6A 00                           	PUSH	0
    74 0000008D 6A 1B                           	PUSH	27
    75 0000008F 6A 1C                           	PUSH	28
    76 00000091 FF 75 DC                        	PUSH	DWORD [-36+EBP]
    77 00000094 E8 [00000000]                   	CALL	_api_putstrwin
    78 00000099 6A 64                           	PUSH	100
    79 0000009B FF 75 D8                        	PUSH	DWORD [-40+EBP]
    80 0000009E E8 [00000000]                   	CALL	_api_settimer
    81 000000A3 83 C4 20                        	ADD	ESP,32
    82 000000A6 6A 01                           	PUSH	1
    83 000000A8 E8 [00000000]                   	CALL	_api_getkey
    84 000000AD 5A                              	POP	EDX
    85 000000AE 83 C0 80                        	ADD	EAX,-128
    86 000000B1 75 15                           	JNE	L3
    87 000000B3 47                              	INC	EDI
    88 000000B4 83 FF 3C                        	CMP	EDI,60
    89 000000B7 75 A7                           	JNE	L2
    90 000000B9 46                              	INC	ESI
    91 000000BA 31 FF                           	XOR	EDI,EDI
    92 000000BC 83 FE 3C                        	CMP	ESI,60
    93 000000BF 75 9F                           	JNE	L2
    94 000000C1 31 F6                           	XOR	ESI,ESI
    95 000000C3 FF 45 D4                        	INC	DWORD [-44+EBP]
    96 000000C6 EB 98                           	JMP	L2
    97 000000C8                                 L3:
    98 000000C8 E8 [00000000]                   	CALL	_api_end
    99 000000CD 8B 65 E0                        	MOV	ESP,DWORD [-32+EBP]
   100 000000D0 8D 65 F4                        	LEA	ESP,DWORD [-12+EBP]
   101 000000D3 5B                              	POP	EBX
   102 000000D4 5E                              	POP	ESI
   103 000000D5 5F                              	POP	EDI
   104 000000D6 5D                              	POP	EBP
   105 000000D7 C3                              	RET

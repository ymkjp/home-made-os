     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード	
     5 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_load_tr
    16 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21, _asm_inthandler27
    17 00000000                                 		GLOBAL	_asm_inthandler2c, _asm_inthandler0c, _asm_inthandler0d
    18 00000000                                 		GLOBAL	_memtest_sub
    19 00000000                                 		GLOBAL	_farjmp, _farcall
    20 00000000                                 		GLOBAL	_asm_hrb_api, _asm_end_app, _start_app
    21 00000000                                 		EXTERN	_inthandler20, _inthandler21, _inthandler27
    22 00000000                                 		EXTERN	_inthandler2c, _inthandler0c, _inthandler0d
    23 00000000                                 		EXTERN	_hrb_api
    24 00000000                                 		GLOBAL	__alloca
    25 00000000                                 
    26                                          [SECTION .text]
    27 00000000                                 
    28 00000000                                 _io_hlt:	; void io_hlt(void);
    29 00000000 F4                              		HLT
    30 00000001 C3                              		RET
    31 00000002                                 
    32 00000002                                 _io_cli:	; void io_cli(void);
    33 00000002 FA                              		CLI
    34 00000003 C3                              		RET
    35 00000004                                 
    36 00000004                                 _io_sti:	; void io_sti(void);
    37 00000004 FB                              		STI
    38 00000005 C3                              		RET
    39 00000006                                 
    40 00000006                                 _io_stihlt:	; void io_stihlt(void);
    41 00000006 FB                              		STI
    42 00000007 F4                              		HLT
    43 00000008 C3                              		RET
    44 00000009                                 
    45 00000009                                 _io_in8:	; int io_in8(int port);
    46 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    47 0000000D B8 00000000                     		MOV		EAX,0
    48 00000012 EC                              		IN		AL,DX
    49 00000013 C3                              		RET
    50 00000014                                 
    51 00000014                                 _io_in16:	; int io_in16(int port);
    52 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    53 00000018 B8 00000000                     		MOV		EAX,0
    54 0000001D 66 ED                           		IN		AX,DX
    55 0000001F C3                              		RET
    56 00000020                                 
    57 00000020                                 _io_in32:	; int io_in32(int port);
    58 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    59 00000024 ED                              		IN		EAX,DX
    60 00000025 C3                              		RET
    61 00000026                                 
    62 00000026                                 _io_out8:	; void io_out8(int port, int data);
    63 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    64 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    65 0000002E EE                              		OUT		DX,AL
    66 0000002F C3                              		RET
    67 00000030                                 
    68 00000030                                 _io_out16:	; void io_out16(int port, int data);
    69 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    70 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    71 00000038 66 EF                           		OUT		DX,AX
    72 0000003A C3                              		RET
    73 0000003B                                 
    74 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    75 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    76 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    77 00000043 EF                              		OUT		DX,EAX
    78 00000044 C3                              		RET
    79 00000045                                 
    80 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    81 00000045 9C                              		PUSHFD		; PUSH EFLAGS という意味
    82 00000046 58                              		POP		EAX
    83 00000047 C3                              		RET
    84 00000048                                 
    85 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    86 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    87 0000004C 50                              		PUSH	EAX
    88 0000004D 9D                              		POPFD		; POP EFLAGS という意味
    89 0000004E C3                              		RET
    90 0000004F                                 
    91 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    92 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    93 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    94 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    95 0000005E C3                              		RET
    96 0000005F                                 
    97 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    98 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    99 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   100 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   101 0000006E C3                              		RET
   102 0000006F                                 
   103 0000006F                                 _load_cr0:		; int load_cr0(void);
   104 0000006F 0F 20 C0                        		MOV		EAX,CR0
   105 00000072 C3                              		RET
   106 00000073                                 
   107 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   108 00000073 8B 44 24 04                     		MOV		EAX,[ESP+4]
   109 00000077 0F 22 C0                        		MOV		CR0,EAX
   110 0000007A C3                              		RET
   111 0000007B                                 
   112 0000007B                                 _load_tr:		; void load_tr(int tr);
   113 0000007B 0F 00 5C 24 04                  		LTR		[ESP+4]		; tr
   114 00000080 C3                              		RET
   115 00000081                                 
   116 00000081                                 _asm_inthandler20:
   117 00000081 06                              		PUSH	ES
   118 00000082 1E                              		PUSH	DS
   119 00000083 60                              		PUSHAD
   120 00000084 89 E0                           		MOV		EAX,ESP
   121 00000086 50                              		PUSH	EAX
   122 00000087 66 8C D0                        		MOV		AX,SS
   123 0000008A 8E D8                           		MOV		DS,AX
   124 0000008C 8E C0                           		MOV		ES,AX
   125 0000008E E8 [00000000]                   		CALL	_inthandler20
   126 00000093 58                              		POP		EAX
   127 00000094 61                              		POPAD
   128 00000095 1F                              		POP		DS
   129 00000096 07                              		POP		ES
   130 00000097 CF                              		IRETD
   131 00000098                                 
   132 00000098                                 _asm_inthandler21:
   133 00000098 06                              		PUSH	ES
   134 00000099 1E                              		PUSH	DS
   135 0000009A 60                              		PUSHAD
   136 0000009B 89 E0                           		MOV		EAX,ESP
   137 0000009D 50                              		PUSH	EAX
   138 0000009E 66 8C D0                        		MOV		AX,SS
   139 000000A1 8E D8                           		MOV		DS,AX
   140 000000A3 8E C0                           		MOV		ES,AX
   141 000000A5 E8 [00000000]                   		CALL	_inthandler21
   142 000000AA 58                              		POP		EAX
   143 000000AB 61                              		POPAD
   144 000000AC 1F                              		POP		DS
   145 000000AD 07                              		POP		ES
   146 000000AE CF                              		IRETD
   147 000000AF                                 
   148 000000AF                                 _asm_inthandler27:   ; （これは_asm_inthandler20等とほとんど同じ）
   149 000000AF 06                                      PUSH    ES
   150 000000B0 1E                                      PUSH    DS
   151 000000B1 60                                      PUSHAD
   152 000000B2 89 E0                                   MOV     EAX,ESP
   153 000000B4 50                                      PUSH    EAX
   154 000000B5 66 8C D0                                MOV     AX,SS
   155 000000B8 8E D8                                   MOV     DS,AX
   156 000000BA 8E C0                                   MOV     ES,AX
   157 000000BC E8 [00000000]                           CALL    _inthandler27
   158 000000C1 58                                      POP     EAX
   159 000000C2 61                                      POPAD
   160 000000C3 1F                                      POP     DS
   161 000000C4 07                                      POP     ES
   162 000000C5 CF                                      IRETD
   163 000000C6                                 
   164 000000C6                                 _asm_inthandler2c:
   165 000000C6 06                              		PUSH	ES
   166 000000C7 1E                              		PUSH	DS
   167 000000C8 60                              		PUSHAD
   168 000000C9 89 E0                           		MOV		EAX,ESP
   169 000000CB 50                              		PUSH	EAX
   170 000000CC 66 8C D0                        		MOV		AX,SS
   171 000000CF 8E D8                           		MOV		DS,AX
   172 000000D1 8E C0                           		MOV		ES,AX
   173 000000D3 E8 [00000000]                   		CALL	_inthandler2c
   174 000000D8 58                              		POP		EAX
   175 000000D9 61                              		POPAD
   176 000000DA 1F                              		POP		DS
   177 000000DB 07                              		POP		ES
   178 000000DC CF                              		IRETD
   179 000000DD                                 
   180 000000DD                                 _asm_inthandler0c:
   181 000000DD FB                              		STI
   182 000000DE 06                              		PUSH	ES
   183 000000DF 1E                              		PUSH	DS
   184 000000E0 60                              		PUSHAD
   185 000000E1 89 E0                           		MOV		EAX,ESP
   186 000000E3 50                              		PUSH	EAX
   187 000000E4 66 8C D0                        		MOV		AX,SS
   188 000000E7 8E D8                           		MOV		DS,AX
   189 000000E9 8E C0                           		MOV		ES,AX
   190 000000EB E8 [00000000]                   		CALL	_inthandler0c
   191 000000F0 83 F8 00                        		CMP		EAX,0
   192 000000F3 0F 85 00000091                  		JNE		_asm_end_app
   193 000000F9 58                              		POP		EAX
   194 000000FA 61                              		POPAD
   195 000000FB 1F                              		POP		DS
   196 000000FC 07                              		POP		ES
   197 000000FD 83 C4 04                        		ADD		ESP,4			; INT 0x0cではこれが必要
   198 00000100 CF                              		IRETD
   199 00000101                                 
   200 00000101                                 _asm_inthandler0d:
   201 00000101 FB                              		STI
   202 00000102 06                              		PUSH	ES
   203 00000103 1E                              		PUSH	DS
   204 00000104 60                              		PUSHAD
   205 00000105 89 E0                           		MOV		EAX,ESP
   206 00000107 50                              		PUSH	EAX
   207 00000108 66 8C D0                        		MOV		AX,SS
   208 0000010B 8E D8                           		MOV		DS,AX
   209 0000010D 8E C0                           		MOV		ES,AX
   210 0000010F E8 [00000000]                   		CALL	_inthandler0d
   211 00000114 83 F8 00                        		CMP		EAX,0
   212 00000117 75 71                           		JNE		_asm_end_app
   213 00000119 58                              		POP		EAX
   214 0000011A 61                              		POPAD
   215 0000011B 1F                              		POP		DS
   216 0000011C 07                              		POP		ES
   217 0000011D 83 C4 04                        		ADD		ESP,4			; INT 0x0dではこれが必要
   218 00000120 CF                              		IRETD
   219 00000121                                 
   220 00000121                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   221 00000121 57                              		PUSH	EDI
   222 00000122 56                              		PUSH	ESI
   223 00000123 53                              		PUSH	EBX
   224 00000124 BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0
   225 00000129 BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1
   226 0000012E 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   227 00000132                                 mts_loop:
   228 00000132 89 C3                           		MOV		EBX,EAX
   229 00000134 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   230 0000013A 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   231 0000013C 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   232 0000013E 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   233 00000141 3B 3B                           		CMP		EDI,[EBX]				; if (pat1 != *p)
   234 00000143 75 18                           		JNE		mts_fin					;	goto fin;
   235 00000145 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   236 00000148 3B 33                           		CMP		ESI,[EBX]				; if (pat0 != *p)
   237 0000014A 75 11                           		JNE		mts_fin					;	goto fin;
   238 0000014C 89 13                           		MOV		[EBX],EDX				; *p = old;
   239 0000014E 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   240 00000153 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end)
   241 00000157 76 D9                           		JBE		mts_loop				;	goto mts_loop
   242 00000159 5B                              		POP		EBX
   243 0000015A 5E                              		POP		ESI
   244 0000015B 5F                              		POP		EDI
   245 0000015C C3                              		RET
   246 0000015D                                 mts_fin:
   247 0000015D 89 13                           		MOV		[EBX],EDX				; *p = old;
   248 0000015F 5B                              		POP		EBX
   249 00000160 5E                              		POP		ESI
   250 00000161 5F                              		POP		EDI
   251 00000162 C3                              		RET
   252 00000163                                 
   253 00000163                                 _farjmp:		; void farjmp(int eip, int cs);
   254 00000163 FF 6C 24 04                     		JMP		FAR[ESP+4]		; eip, cs
   255 00000167 C3                              		RET
   256 00000168                                 
   257 00000168                                 _farcall:		; void farcall(int eip, int cs);
   258 00000168 FF 5C 24 04                     		CALL	FAR[ESP+4]		; eip, cs
   259 0000016C C3                              		RET
   260 0000016D                                 
   261 0000016D                                 _asm_hrb_api:
   262 0000016D FB                              		STI
   263 0000016E 1E                              		PUSH	DS
   264 0000016F 06                              		PUSH	ES
   265 00000170 60                              		PUSHAD					; 保存のためのPUSH
   266 00000171 60                              		PUSHAD					; hrb_apiに渡すためのPUSH
   267 00000172 66 8C D0                        		MOV		AX,SS
   268 00000175 8E D8                           		MOV		DS,AX			; OS用のセグメントをDSとESにも入れる
   269 00000177 8E C0                           		MOV		ES,AX
   270 00000179 E8 [00000000]                   		CALL	_hrb_api
   271 0000017E 83 F8 00                        		CMP		EAX,0			; EAXが0でなければアプリ終了処理
   272 00000181 75 07                           		JNE		_asm_end_app
   273 00000183 83 C4 20                        		ADD		ESP,32
   274 00000186 61                              		POPAD
   275 00000187 07                              		POP		ES
   276 00000188 1F                              		POP		DS
   277 00000189 CF                              		IRETD
   278 0000018A                                 _asm_end_app:
   279 0000018A                                 ;	EAXはtss.esp0の番地
   280 0000018A 8B 20                           		MOV		ESP,[EAX]
   281 0000018C C7 40 04 00000000               		MOV		DWORD[EAX+4],0
   282 00000193 61                              		POPAD
   283 00000194 C3                              		RET						; cmd_appへ帰る
   284 00000195                                 
   285 00000195                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   286 00000195 60                              		PUSHAD					; 32bitレジスタを全部保存
   287 00000196 8B 44 24 24                     		MOV		EAX,[ESP+36]	; アプリ用EIP
   288 0000019A 8B 4C 24 28                     		MOV		ECX,[ESP+40]	; アプリ用CS
   289 0000019E 8B 54 24 2C                     		MOV		EDX,[ESP+44]	; アプリ用ESP
   290 000001A2 8B 5C 24 30                     		MOV		EBX,[ESP+48]	; アプリ用DS/SS
   291 000001A6 8B 6C 24 34                     		MOV		EBP,[ESP+52]	; tss.esp0の番地
   292 000001AA 89 65 00                        		MOV		[EBP  ],ESP		; OS用のESPを保存
   293 000001AD 8C 55 04                        		MOV		[EBP+4],SS		; OS用のSSを保存
   294 000001B0 8E C3                           		MOV		ES,BX
   295 000001B2 8E DB                           		MOV		DS,BX
   296 000001B4 8E E3                           		MOV		FS,BX
   297 000001B6 8E EB                           		MOV		GS,BX
   298 000001B8                                 ; 以下はRETFでアプリに行かせるためのスタック調整
   299 000001B8 83 C9 03                        		OR		ECX,3			; アプリ用のセグメント番号に3をorする
   300 000001BB 83 CB 03                        		OR		EBX,3			; アプリ用のセグメント番号に3をorする
   301 000001BE 53                              		PUSH	EBX				; アプリのSS
   302 000001BF 52                              		PUSH	EDX				; アプリのESP
   303 000001C0 51                              		PUSH	ECX				; アプリのCS
   304 000001C1 50                              		PUSH	EAX				; アプリのEIP
   305 000001C2 CB                              		RETF
   306 000001C3                                 
   307 000001C3                                 __alloca:
   308 000001C3 83 C0 FC                        		ADD		EAX,-4
   309 000001C6 29 C4                           		SUB		ESP,EAX
   310 000001C8 FF 24 04                        		JMP		DWORD [ESP+EAX]		; RETの代わり
